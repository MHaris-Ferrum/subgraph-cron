export const ABI_FUNCTION_DEFINITIONS = [
  "UPGRADE_INTERFACE_VERSION()",
  "VERSION()",
  "admin()",
  "authorityMgr()",
  "calculateBlockHash(uint64,uint64,QuantumPortalLib.RemoteTransaction[])",
  "calculateFixedFee(uint256,uint256)",
  "feeConvertor()",
  "finalize(uint256,uint256,uint256[],bytes32,uint64,bytes)",
  "fixedFeeTarget()",
  "gateway()",
  "getBlockIdx(uint64,uint64)",
  "getLastFinalizedBlock(uint256)",
  "getLastLocalBlock(uint256)",
  "getLastMinedBlock(uint256)",
  "getLocalBlockTransaction(uint256,uint256)",
  "getLocalBlockTransactionLength(uint256)",
  "getLocalBlockTransactions(uint256)",
  "getLocalBlocks(uint256)",
  "getMinedBlock(uint256)",
  "getMinedBlockTransactions(uint256)",
  "initialize(address,address,uint256,address)",
  "isLocalBlockReady(uint64)",
  "lastRemoteMinedBlock(uint64)",
  "ledger()",
  "localBlockByNonce(uint64,uint64)",
  "mineRemoteBlock(uint64,uint64,QuantumPortalLib.RemoteTransaction[],bytes32,uint64,bytes)",
  "minedBlockByNonce(uint64,uint64)",
  "minerMgr()",
  "minerMinimumStake()",
  "owner()",
  "proxiableUUID()",
  "registerMiner()",
  "registerTransaction(uint64,address,address,address,address,uint256,bytes)",
  "renounceOwnership()",
  "setAdmin(address)",
  "submitFraudProof(uint64,uint64,uint64,QuantumPortalLib.RemoteTransaction[],bytes32,uint64,bytes,address)",
  "transferOwnership(address)",
  "unregisterMiner(address)",
  "updateAuthorityMgr(address)",
  "updateFeeConvertor(address)",
  "updateFeeTargets(address,address)",
  "updateGateway(address)",
  "updateLedger(address)",
  "updateMinerMgr(address)",
  "updateMinerMinimumStake(uint256)",
  "upgradeToAndCall(address,bytes)",
  "varFeeTarget()",
];
